/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 15.10.2020 20:21:33

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 144;
uint8_t* tensor_arena = NULL;
static uint8_t* current_location;
static uint8_t* tensor_boundary;
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const TfArray<1, float> quant0_scale = { 1, { 0.087627746164798737, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[21] = { -12, -55, -60, -8, -62, -2, 2, -71, 314, 335, 579, -157, -184, -127, 76, 6, -12, 295, -54, -103, 61, };
const TfArray<1, int> tensor_dimension1 = { 1, { 21 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00033380510285496712, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(8) int32_t tensor_data2[10] = { -157, 21, -303, -309, -225, 127, -210, 629, -157, -180, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.00022292052744887769, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[4] = { 914, -439, -296, 46, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00029292394174262881, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int8_t tensor_data4[21*33] = { 
  -56, 53, -61, 57, 45, 56, 48, -76, 31, -18, 8, 85, -30, -21, 37, -39, 68, 1, -53, -8, -86, -57, 42, 14, -14, 42, 31, 42, 13, -39, 6, -35, 86, 
  3, -90, -77, 48, -9, 19, 7, -24, 35, 49, -28, -51, 37, -32, 81, 34, -1, -20, 16, 65, -56, -52, -15, -16, 32, -48, 19, 60, 41, 74, 27, -36, 33, 
  30, -25, -22, 0, -18, 66, -41, -16, 46, 112, 25, 94, -66, -9, -53, -23, -9, -69, -67, 18, 30, 103, 3, -34, -18, 44, 25, 64, -80, -102, -50, 26, 62, 
  -87, 46, -20, -33, -75, 36, -9, -3, 62, 81, 81, -18, -38, -81, -14, 58, 14, 56, 34, 56, -57, -35, -31, 21, -78, -78, -55, 27, 51, 55, 84, 60, 50, 
  -5, -54, -16, -25, 47, -9, 22, 54, -16, 62, -77, 36, -55, -30, -43, 24, -31, 57, -87, -89, -38, -20, -71, -18, 70, -33, 45, -56, -39, -93, -6, -80, 52, 
  89, 124, -15, -32, -29, 0, 58, 1, 65, 14, -3, -32, 64, 26, 112, 112, -25, 97, 43, 42, -18, 111, 9, 15, -43, -30, 105, 84, -19, 13, -58, 30, 53, 
  -75, 89, 21, 38, 77, 81, 24, -9, -4, 55, -5, 37, 70, -25, 88, -32, -14, 83, -5, -46, 5, -85, -60, 68, 13, -23, 16, 62, -6, -96, -30, 4, -3, 
  -36, 28, 1, -72, 2, -35, 35, 46, -18, 20, 3, -65, -12, 29, -41, -66, -24, 15, 68, 10, -75, -23, 66, -43, -67, -69, 10, -39, 5, -1, 9, 64, 38, 
  53, 58, -56, 22, 89, 10, 81, -62, 14, 37, -59, 92, 119, -23, -27, 18, -4, 80, -53, -38, -3, 24, -91, 101, -25, 75, -6, -7, 76, 20, 11, 81, 18, 
  16, -34, 16, -17, 44, 0, -27, -51, -62, -35, -14, -33, -36, 74, -4, -4, 39, 48, 20, -7, -81, 79, 64, -39, 113, -19, 62, 114, 70, 90, -21, 107, -52, 
  -72, 45, 15, 56, 50, 75, -18, 66, -33, 62, -47, -20, -26, 6, 2, -46, 19, 6, 27, 53, -14, -14, 14, -92, 32, 69, 32, 77, 11, -54, 42, 6, -37, 
  58, 45, -38, -55, -34, -12, 4, -68, 64, 64, -53, -77, 25, -87, 1, -31, -79, 52, -80, -58, -46, 65, -47, 34, -38, -29, 72, 7, -97, -87, -94, 21, -32, 
  19, 4, 72, 15, -16, -47, -15, -83, 0, 30, -34, 2, -34, 51, 5, -16, -26, 61, -19, 33, -27, 22, 16, -55, 17, -74, -36, -86, -66, 60, -92, -86, -57, 
  -1, -98, -38, 4, 67, 22, -9, -76, 45, -39, -85, -14, -52, 66, -19, 5, 66, -34, 59, -87, -38, -60, -79, 43, -19, 55, 71, -40, 61, 73, 6, 38, -34, 
  -44, 82, 59, -68, 58, 5, -63, -68, 14, 11, 9, 91, -62, -36, -50, 26, 45, 67, 3, -67, 44, 28, 76, 79, -61, 5, -25, 14, -49, 76, -30, 82, -20, 
  -51, 127, -85, 122, 58, -30, 111, -59, 48, 1, -64, -37, 17, -36, 19, -1, 76, -40, 107, 42, -40, -12, -28, 1, 122, 88, -12, -35, 29, 5, 42, 14, 37, 
  -47, 16, 87, 57, 23, 64, -9, 25, 44, -23, -47, -43, -21, 26, -51, 26, 15, 37, -51, 42, -46, 67, 88, 77, -80, 45, 0, 23, 15, 62, -71, -27, 75, 
  -11, 16, 86, 15, 101, -58, 40, 46, -34, -57, -20, 5, 28, -14, 60, 57, -7, -35, 36, -70, 8, -31, -77, -19, 19, -24, 76, -8, 46, -40, -86, 36, -11, 
  -61, 34, 7, 16, 16, -66, -36, -7, 42, 54, 78, -43, 71, -54, -83, -47, -37, 61, -8, -81, -77, 74, -46, -49, 13, -34, 84, 25, 41, 81, -39, -58, 76, 
  -38, -54, -48, -6, 14, -72, 31, -62, -78, -78, -38, 10, -61, 68, 11, -53, 65, -81, 44, 50, 65, -66, 13, 73, -10, 17, 40, -35, -89, 18, -17, -5, 57, 
  -60, 10, 35, 28, 74, 22, -17, 68, -57, 6, 68, 0, 82, -7, -14, 1, 59, -38, -30, -50, 60, -46, -46, 89, 67, -28, 15, 48, -37, 15, -89, -40, -83, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 21,33 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0038093540351837873, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[10*21] = { 
  -52, -7, 18, 12, 66, -49, -26, 11, -74, -79, -33, -51, 69, 64, -34, 0, -79, 6, -28, 2, 56, 
  -80, 6, -39, 32, 29, -1, 45, -33, -60, -61, 28, -64, -18, -30, -82, -80, -10, 80, 37, -77, 42, 
  -65, 50, 10, -43, 47, 6, 37, -40, 98, 38, -60, -33, 25, -74, 20, -21, -31, 86, -78, -27, 79, 
  -12, -18, -79, -72, -19, 18, 54, 60, 85, -21, 68, 22, -9, -59, -40, 126, -2, -2, 10, -39, -52, 
  48, 27, -41, -69, -90, 78, -10, -7, -38, 127, 39, -102, -78, 26, 1, 58, 21, -92, 80, 19, 51, 
  88, 72, -101, 5, -65, 24, 33, -19, 119, -75, -74, 76, -73, 49, -27, 108, -56, 37, -74, 38, 74, 
  98, -23, -26, 62, 44, -13, 40, 36, 74, 86, -39, 35, -99, 1, 0, 39, 13, -23, 17, -35, 78, 
  -26, 77, -63, -83, -23, 12, -27, -71, 63, 99, 59, 72, -22, -8, -21, 11, -49, 12, -40, 22, 55, 
  -34, 48, -11, 33, 73, -5, 45, -81, -1, -51, 29, 52, 64, 76, -29, 74, -81, 94, -13, -4, -80, 
  -26, 19, 39, 71, -50, 88, 62, -42, 96, -59, -31, 45, -49, -8, -42, 1, 105, 109, -11, 91, 43, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,21 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0050516184419393539, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[4*10] = { 
  -37, -19, -8, 31, -26, -43, -100, 12, 9, 4, 
  56, -23, 74, 51, -10, 61, 70, -60, 55, 64, 
  -104, -91, -65, 83, 72, 21, 45, -1, 27, -79, 
  -88, 102, 71, -6, -17, -31, -28, -89, -95, 127, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 4,10 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0062324060127139091, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,21 } };
const TfArray<1, float> quant7_scale = { 1, { 0.044128537178039551, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.047000136226415634, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<1, float> quant9_scale = { 1, { 0.087719649076461792, } };
const TfArray<1, int> quant9_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,4 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,1 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 33, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 84, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 693, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 210, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension7, 21, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %u\n", bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  current_location = tensor_arena + kTensorArenaSize;
  tensor_boundary = tensor_arena;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
      uint8_t* end = start + tensorData[i].bytes;

     tflTensors[i].data.data =  start;

     if (end > tensor_boundary) {
       tensor_boundary = end;
     }
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
  free_fnc(tensor_arena);
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
